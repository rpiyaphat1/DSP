import streamlit as st
import numpy as np
import librosa
import librosa.display
import soundfile as sf
import matplotlib.pyplot as plt
import torch
import torchaudio
from scipy.ndimage import median_filter
from scipy.signal import spectrogram

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI DeepFilterNet
@st.cache_resource
def load_model():
    model = torch.hub.load("jansson/demucs", "demucs")  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ DeepFilterNet
    model.eval()
    return model

model = load_model()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Spectral Gating (‡∏•‡∏ö noise ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
def spectral_gate(y, sr, threshold=0.1):
    _, _, Sxx = spectrogram(y, fs=sr)
    mask = Sxx > (threshold * np.max(Sxx))  # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡πÉ‡∏´‡πâ‡∏•‡∏ö noise ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ threshold
    y_clean = y * mask[:len(y)]
    return y_clean

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô AI Noise Reduction (DeepFilterNet)
def denoise_with_ai(audio, sr):
    audio_tensor = torch.tensor(audio, dtype=torch.float32).unsqueeze(0)
    with torch.no_grad():
        denoised_audio = model(audio_tensor)
    return denoised_audio.squeeze(0).numpy()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Median Filter (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î noise ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
def smooth_audio(y):
    return median_filter(y, size=3)

# Streamlit UI
st.title("üéµ Advanced AI + DSP Noise Reduction")
st.write("üîç ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö noise ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á!")

uploaded_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.wav)", type=["wav"])

if uploaded_file:
    y, sr = librosa.load(uploaded_file, sr=None)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    st.write("üéß ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
    fig, ax = plt.subplots()
    librosa.display.waveshow(y, sr=sr, ax=ax)
    st.pyplot(fig)

    # ‡πÉ‡∏ä‡πâ AI ‡∏•‡∏ö noise
    y_denoised = denoise_with_ai(y, sr)

    # ‡πÉ‡∏ä‡πâ Spectral Gating ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö noise ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    y_filtered = spectral_gate(y_denoised, sr)

    # Smooth ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏ö noise ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    y_final = smooth_audio(y_filtered)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏ö noise ‡πÅ‡∏•‡πâ‡∏ß
    st.write("üîá ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö Noise")
    fig, ax = plt.subplots()
    librosa.display.waveshow(y_final, sr=sr, ax=ax)
    st.pyplot(fig)

    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Noise
    output_file = "denoised_output.wav"
    sf.write(output_file, y_final, sr)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß", data=open(output_file, "rb"), file_name="denoised_output.wav")
