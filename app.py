import streamlit as st
import torch
import librosa
import numpy as np
import os
import scipy.signal as signal

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà Train ‡πÅ‡∏•‡πâ‡∏ß
class BritishAccentScoreModel(nn.Module):
    def __init__(self, input_size):
        super(BritishAccentScoreModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 1)  # 1 Output = British Accent Score
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return self.sigmoid(x) * 100  #  British Accent Score (0-100%)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = BritishAccentScoreModel(input_size=13)
model.load_state_dict(torch.load("british_accent_score_model.pth", map_location=torch.device('cpu')))
model.eval()

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• (DSP Processing)
def preprocess_audio(file_path, sr=16000, n_mfcc=13):
    y, sr = librosa.load(file_path, sr=sr)

    # ‚úÖ Bandpass Filter (300Hz - 3400Hz)
    lowcut = 300.0
    highcut = 3400.0
    b, a = signal.butter(4, [lowcut / (sr / 2), highcut / (sr / 2)], btype='band')
    y_filtered = signal.filtfilt(b, a, y)

    # ‚úÖ Normalization
    y_filtered = y_filtered / np.max(np.abs(y_filtered))

    # ‚úÖ Extract MFCC
    mfcc = librosa.feature.mfcc(y=y_filtered, sr=sr, n_mfcc=n_mfcc)
    return np.mean(mfcc, axis=1)  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ MFCC Features

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Streamlit UI
st.title("Did you have a British accent?")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏µ‡∏¢‡∏á British")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (WAV)", type=["wav"])

if uploaded_file is not None:
    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    file_path = f"temp_audio.wav"
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    # ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    mfcc_features = preprocess_audio(file_path)
    if mfcc_features is not None:
        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Tensor
        X_test_tensor = torch.tensor(mfcc_features, dtype=torch.float32).unsqueeze(0)
        
        # ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ British Accent Score
        with torch.no_grad():
            score = model(X_test_tensor).item()
        
        st.success(f"üéØ British Accent Score: {score:.2f}%")
    else:
        st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
